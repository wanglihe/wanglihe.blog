代码从哪里开始执行
##################
:date: 2015-06-17 14:46
:author: wanglihe
:category: Uncategorized
:slug: 代码从哪里开始执行
:status: published

上一篇我们制作了一个最小的可执行的并且结构完整的elf64文件。从中我们看到程序的执行需要一个入口，这个入口其实就是指出了一个偏移量，让操作系统从文件那个位置开始执行。那么操作系统，或者更深一步，计算机启动时，第一个程序，即所谓的固件（firmware），是这样执行的吗？其实大同小异，毕竟elf是作为前代各种执行结构的总结而设计的，这些前代当然也包括操作系统和各种固件。学习这一部分知识应该用哪个实例呢？我想到了计算机中最广泛存在的底层固件bios。好，接下来我就以kvm的默认bios——seabios来说说，代码从哪里开始执行，都做了什么。这一部分与硬件关系紧密，seabios会牵扯到x86指令cpu的一些细节，其他指令集未必如此，但总体的大结构是相似的，学习时注意。

那么首先，我先说下BIOS都干了什么，然后就以执行顺序讲解。BIOS整体来讲，就是初始化IO系统，毕竟人家叫basic
IO
system。从cpu角度来讲，IO就是各种线啊，电路啊什么的，设个值，代表可用。如何用呢？每一个连到cpu上的设备（暂且你就认为每一个吧）都对应到cpu的一个口(port)上，用起来像内存，你可以认为是一个内存地址，当然也可以认为是一个编号，反正从程序员的角度看就是一个整数。可以往口上面写数据，也可以从上面读数据。那么BIOS呢，就为每个口指定一个处理代码。代码分两种，口上有数据要读，一种，想要往口上写，再来一种。说起来简单，但是实际上硬件多种多样，往上写什么，从口上读什么，用多快的速度（频率）写都是有讲究的，不然硬件就无法正确工作。BIOS因为需要很好的稳定性和兼容性，所以自然有商业公司承包而进行主力开发，毕竟还是很费钱费人力的。作为商业化的软件，一定不可能独善其身，只做该做的，要想兼容，要想让客户满意，就一定要有能力搞定硬件故障，或者至少搞定部分硬件故障。于是BIOS作为底层系统和第一个被加载到硬件平台的软件，自然而然，哑巴吃黄莲的加入了自检系统（POST），用于整体硬件系统的健康性检测。而且CPU越来越复杂，主板以及基础硬件越来越多，BIOS也就跟着越来越扯，连什么温度检测啊，开机密码啊，定时开机啊，甚至防病毒啊，啪啪啪就都上了。再说回到BIOS的基本功能，读和写的功能函数是怎么使用的呢？嘿嘿嘿，虽说BIOS功能牛逼，但是人家却喜欢“被动”。比方说读，BIOS不会主动检测某一个口上有数据可读，倒不是不能，但是如果这样做需要不断的检测，但是大部分检测的结果都是没有数据可读，非常不经济，浪费了大好的青春还不如好好发呆呢。于是它就真在那发呆，啥时候某个口上有数据了，那个口就拍它一下，说有数据了，读一下。于是BIOS就执行了一下相关函数。这个方式就是“中断”模式。中断这个词我学习的时候完全不能理解为啥中断了就去读数据了，其实吧，cpu或者说BIOS并不是真的在那呆着，有好多事在做呢，哪怕就是呆着呢，要想让它读数据，可不得“中断”一下嘛，中断一下发呆，干完再接着发呆。在BIOS中，为每一个中断编上号，再设定好了一个处理函数，把这些函数的入口都放到一个叫作“中断向量”的东西里，其实就是一个地址列表，当某一个口的中断来了，看看是几号中断，拿着号去找相应的处理函数，就完成的基本的功能了。随着发展，中断和口的关系最终还是分开了，中断可以用其他方式发起，并不一定由硬件产生，比如想往口上写数据，就由上层准备好数据，然后发起个中断，BIOS就跑过来拿数据，想写到哪个口上都由上层指定。

接下来就说到BIOS的执行顺序了。这里先得说说cpu怎么执行指令的。\ `上一篇 <http://blog.wanglihe.me/2015/04/%e5%a6%82%e4%bd%95%e7%94%9f%e6%88%90%e6%9c%80%e5%b0%8f%e7%9a%84elf64/>`__\ 说到普通的程序会有一个“入口”地址，操作系统把这个地址拿到，然后交给cpu执行。但是BIOS可没有更底层的系统提供这个数据了，也就是说，要问整个电脑启动的这第一条指令cpu是怎么拿到的呢？我们在现在计算机系统上从上往下想很难想到办法，但是前辈们第一个遇到的问题就是这个，计算机不能启动还运行个屁啊。其实很简单，如果你是搞硬件出身也很容易就能想到，就是每次启动的时候都到指定的一个地址去取指令就行喽。现代cpu一加电，就会发起一个重置指令，将cpu内所有的静电产生的伪数据统一清空，然后到一条预定义的地址去取指令开始执行。这个地址每个系列的cpu都可以自己定义，x86系列的cpu用的是0xfff0，我们的seabios的入口就是这个地址。是时候放出代码了！以下这段代码来自于seabios的romlayout.S:

::

    /****************************************************************
     * Fixed position entry points
     ****************************************************************/

            // Specify a location in the fixed part of bios area.
            .macro ORG addr
            .section .fixedaddr.\addr
            .endm

            ORG 0xe05b
    entry_post:
            cmpl $0, %cs:HaveRunPost                // Check for resume/reboot
            jnz entry_resume
            ENTRY_INTO32 _cfunc32flat_handle_post   // Normal entry point

            ORG 0xe2c3
            IRQ_ENTRY 02

            ORG 0xe3fe
            .global entry_13_official
    entry_13_official:
            jmp entry_13

            // 0xe401 - OldFDPT in disk.c

            ORG 0xe6f2
            .global entry_19_official
    entry_19_official:
            jmp entry_19

            // 0xe6f5 - BIOS_CONFIG_TABLE in misc.c

            // 0xe729 - BaudTable in serial.c

            ORG 0xe739
            IRQ_ENTRY_ARG 14

            ORG 0xe82e
            IRQ_ENTRY_ARG 16

            ORG 0xe987
            IRQ_ENTRY 09

            ORG 0xec59
            IRQ_ENTRY_ARG 40

            ORG 0xef57
            IRQ_ENTRY 0e

            // 0xefc7 - diskette_param_table in floppy.c

            ORG 0xefd2
            IRQ_ENTRY_ARG 17

            ORG 0xf045
    entry_10_0x0f:
            // XXX - INT 10 Functions 0-Fh Entry Point
            iretw

            ORG 0xf065
            IRQ_ENTRY_ARG 10

            // 0xf0a4 - VideoParams in misc.c

            ORG 0xf841
            IRQ_ENTRY_ARG 12

            ORG 0xf84d
            IRQ_ENTRY_ARG 11

            ORG 0xf859
            .global entry_15_official
    entry_15_official:
            cmpb $0x89, %ah
            je entry_1589           // 1589 calls return in protected mode
            IRQ_ENTRY_ARG 15

            // 0xfa6e - vgafont8 in font.c

            ORG 0xfe6e
            .global entry_1a_official
    entry_1a_official:
            cmpb $0xb1, %ah
            je entry_pcibios16      // PCIBIOS calls can be in protected mode
            IRQ_ENTRY_ARG 1a

            ORG 0xfea5
            IRQ_ENTRY 08

            // 0xfef3 - InitVectors in misc.c

            // 0xff00 - BiosCopyright in misc.c

            ORG 0xff53
            .global entry_iret_official
    entry_iret_official:
            iretw

            ORG 0xff54
            IRQ_ENTRY_ARG 05

            ORG 0xfff0 // Power-up Entry Point
            .global reset_vector
    reset_vector:
            ljmpw $SEG_BIOS, $entry_post

            // 0xfff5 - BiosDate in misc.c

            // 0xfffe - BiosModelId in misc.c

            // 0xffff - BiosChecksum in misc.c

            .end

理解这段汇编不难，ORG就是说从这行开始，代码就放在绝对地址上，其他就是普通汇编了。最后面那一节，0xfff0就是cpu重置(reset)后运行的地址，这里面就也就是标识reset\_vector节的入口，BIOS就从这里开始执行了。好，剩下的就是看看BIOS都干啥了。它首先跳到entry\_post，就是进行开机自检（power-on-self-test=post）了。开机自检的主要部分其实就是逐一初始化硬件，看看有没有错，seabios检测了所有可能出错部分并用dprintf进行了输出，比如某些硬件初始化错误什么。在源码中查找dprintf就可以找到了。但是对于本文来说，并没有什么卵用，本文主要讲代码是如何开始运行的，开机自检一大串初始化硬件跟我们关系不大。那么真正跟代码运行有关的是两个部分，一个是bios将自身的代码复制到真正的内存区，并开始在内存中执行，另一个是初始化了中断向量。前者代表着代码脱离硬件，可以运行，甚至是可以修改自身了，这其实可以说计算机启动，真正执行的部分载入完成了。而后者是计算机运行的两种基本模式的保障，一般是顺序执行，但在处理特别输入时，可以用“中断”中断当前的执行顺序，完成特定功能并重新开始顺序执行。至此，就可以说，我们的代码从这里开始执行了。当然，作为现在复杂的计算机系统，这种载入，执行，再载入再执行可进行多遍，功能从简单到复杂，逐一进步。顺序是这样的，开机后初始代码将BIOS载入内存，交出控制权，BIOS执行完成后，从磁盘载入操作系统加载器（如grub,ntldr），并交出控制权。加载器载入操作系统，再次交出控制权给操作系统。

我们的代码，就是这样开始执行的。
